AWSTemplateFormatVersion: '2010-09-09'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Miner Configuration
        Parameters:
          - Miner
          - CpuMiner
          - MoneroMiningPool
          - EthWallet
          - Url1
          - Url2
          - Worker
          - Password

      - Label:
          default: Instance Configuration
        Parameters:
          - InstanceType
          - InstanceAmi

      - Label:
          default: Networking Configuration
        Parameters:
          - VpcId
          - SubnetIds
          - SSHAccessIP
          - ChooseVPC
          - KeyName

    ParameterLabels:
      KeyName:
        default: EC2 Key Pair
      SSHAccessIP:
        default: Restrict SSH To

Parameters:
  KeyName:
    Description: REQUIRED - Select an EXISTING EC2 key pair to launch your Siacoin miner instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: You must choose the name of an existing EC2 KeyPair
    Default: brad-template
  SSHAccessIP:
    Description: Enter your source IP for SSH access. Use http://ipchicken.com if not sure. Note that 0.0.0.0/0 isn't allowed to protect yourself from yourself.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default : 98.202.252.84/32
    AllowedValues:
      - 0.0.0.0/0
      - 98.202.252.84/32
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})(/32)"
    ConstraintDescription: Must be a valid CIDR range of the form x.x.x.x/32
  InstanceType:
    Type: String
    Default: g4dn.xlarge
    AllowedValues:
      # Amazon Linux 2 AMI with NVIDIA TESLA GPU Driver
      ## The commented-out are not worth it - too slow for the price
      #- g3s.xlarge    # 1 GPU Tesla M60
      #- g3.8xlarge    # 2 GPU Tesla M60
      - g4dn.xlarge   # 1 GPU Tesla T4 -- best value (cost/performance)
      - g4dn.2xlarge  # 1 GPU Tesla T4
      - g4dn.12xlarge # 4 GPU Tesla T4
      - g4dn.metal
      #- p2.xlarge     # 1 GPU Tesla K80
      #- p2.8xlarge    # 8 GPU Tesla K80
      #- p2.16xlarge   # 16 GPU Tesla K80
      - p3.2xlarge    # 1 GPU Tesla V100
      - p3.8xlarge    # 4 GPU Tesla V100
      - p3.16xlarge   # 8 GPU Tesla V100

  InstanceCount:
    Type: Number
    Default: 5
    MaxValue: 50

  EthWallet:
    Type: String
    Description: Ethereum Wallet Address (36 ledger, 7c mew)
    Default: "0x7c25B5dBe95153812901f1dD9a16C0EE41124114"
    AllowedPattern: "0x[0-9a-fA-F]+"
    AllowedValues:
      - "0x36568B6348f1d5256Fed5E0a007AEA7541f6d618"
      - "0x7c25B5dBe95153812901f1dD9a16C0EE41124114"

  Miner:
    Type: String
    Description: What kind of miner
    Default: twominerseth
    AllowedValues:
      - betterhasheth
      - twominersravencoin
      - twominerseth
      - ethermineeth
      - grin

  CpuMiner:
    Type: String
    Description: What kind of cpu miner
    Default: none
    AllowedValues:
      - none
      - xmr
      - xmr2miners
      - xmrsupportxmr
      - tron
      - aave

  Url1:
    Type: String
    Description: Pool Url 1 betterhash-eth only
    Default: "88.198.11.177:55439"

  Url2:
    Type: String
    Description: Pool Url 2 (betterhash-eth only)
    Default: "38.91.101.106:55439"

  Worker:
    Type: String
    Description: Worker (betterhash-eth only)
    Default: "xxxWALLETxxx.0000FCB0"

  Password:
    Type: String
    Description: Password (betterhash-eth only)
    Default: "xxxPASSxxx"

  VpcId:
    Description: The VPC where this stack will be deployed
    Type: AWS::EC2::VPC::Id

  MoneroMiningPool:
    Description: Monero pool betterhash:3031 supportxmr:3032 tron:3034 2miners:3035
    Type: String
    Default: 98.202.252.84:3031
    AllowedValues:
      - 98.202.252.84:3031
      - mine.xmrpool.net:3333
      - pool.myriade.io:8222
      - siamining.com:3333
      - 98.202.252.84:3031
      - 98.202.252.84:3032
      - 98.202.252.84:3034
      - 98.202.252.84:3035

  SubnetIds:
    Description: The subnets where the instances will be deployed - at least 3 subnets!
    Type: List<AWS::EC2::Subnet::Id>

Mappings:
  # ImageId of 'Deep Learning AMI (Ubuntu 18.04) Version 36.0' in each region
  RegionMap:
    ap-northeast-1:
      ImageId: ami-03b8cfea5460e4881
    ap-northeast-2:
      ImageId: ami-07e004f63a0cccdd3
    ap-south-1:
      ImageId: ami-02cb047909c100c3d
    ap-southeast-1:
      ImageId: ami-068f673b54015684e
    ap-southeast-2:
      ImageId: ami-0f558ede443627831
    ca-central-1:
      ImageId: ami-0ca5bba27cf7db8f0
    eu-central-1:
      #ImageId: ami-01227276a4e5a4a31
      #amazon linux
      ImageId: ami-05c02ccbeeeb635ca
    eu-north-1:
      ImageId: ami-080691999cd85e762
    eu-west-1:
      ImageId: ami-006ff58f5247c50eb
    eu-west-2:
      ImageId: ami-096a6497745975f89
    eu-west-3:
      ImageId: ami-0346672391424d8e5
    sa-east-1:
      #ImageId: ami-048837a0bfc1ba1a6
      ImageId: ami-098b893bcc691f3bd
    us-east-1:
      #ImageId: ami-063585f0e06d22308
      #ImageId: ami-098b893bcc691f3bd
      # ubuntu 18
      #ImageId: ami-072519eedc1730252
      #amazon linux
      ImageId: ami-06b7e61d95c2e9cc8
    us-east-2:
      #ImageId: ami-01bd6a1621a6968d7
      #ImageId: ami-09f77b37a0d32243a
      #amazon linux
      ImageId: ami-04f99155cdcd8fb98
    us-west-1:
      #ImageId: ami-05fbe06ba1b862ef6
      #ImageId: ami-0fe05354c2b605fe4
      #amazon linux
      ImageId: ami-0a8c59d72e15fd3fd
    us-west-2:
      #ImageId: ami-0bc87a16c757a7f07
      #ImageId: ami-084f81625fbc98fa4
      #amazon linux
      ImageId: ami-09768a89f9e5da6d3

  SpotPriceMap:
    g4dn.xlarge:
      MaxPrice: 0.16
    g4dn.2xlarge:
      MaxPrice: 0.23
    g4dn.12xlarge:
      MaxPrice: 1.57
    p3.2xlarge:
      MaxPrice: 0.92
    p3.8xlarge:
      MaxPrice: 3.68
    p3.16xlarge:
      MaxPrice: 7.36

Resources:

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref InstanceRole

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt InstanceProfile.Arn
        InstanceType: !Ref InstanceType
        KeyName:
          Ref: KeyName
        ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", ImageId ]
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData:
          'Fn::Base64':
            'Fn::Sub': |
              #!/bin/bash -x

              mkdir /crypto
              cd /crypto

              wget https://github.com/trexminer/T-Rex/releases/download/0.19.11/t-rex-0.19.11-linux-cuda11.1.tar.gz
              mkdir t-rex
              (cd t-rex && tar xvfz ../t-rex-0.19.11-linux-cuda11.1.tar.gz)

              wget https://github.com/develsoftware/GMinerRelease/releases/download/2.45/gminer_2_45_linux64.tar.xz
              mkdir gminer
              (cd gminer && tar xvf ../gminer_2_45_linux64.tar.xz)

              wget https://github.com/mimblewimble/grin-miner/releases/download/v4.0.0/grin-miner-v4.0.0-linux-amd64.tar.gz
              tar xzvf grin-miner-v4.0.0-linux-amd64.tar.gz
              yum install -y openssl11-devel

              #ubuntu 20
              #wget https://github.com/xmrig/xmrig/releases/download/v6.9.0/xmrig-6.9.0-focal-x64.tar.gz
              #tar xvzf xmrig-6.9.0-focal-x64.tar.gz

              #amazon linux 2 with nvidia drivers
              wget https://github.com/xmrig/xmrig/releases/download/v6.9.0/xmrig-6.9.0-linux-static-x64.tar.gz
              tar xvzf xmrig-6.9.0-linux-static-x64.tar.gz

              cd /crypto/xmrig-6.9.0

              cat > hugepages.sh << __EOF__
              #!/bin/bash -e
              sysctl -w vm.nr_hugepages=$(nproc)
              for i in \$(find /sys/devices/system/node/node* -maxdepth 0 -type d);
              do
                  echo 3 > "\$i/hugepages/hugepages-1048576kB/nr_hugepages";
              done
              echo "1GB pages successfully enabled"
              __EOF__

              bash ./hugepages.sh

              cat > config.json << __EOF__
              {
                  "autosave": true,
                  "cpu": {
                    "enabled": true,
                    "huge-pages": true
                  },
                  "opencl": false,
                  "cuda": false,
                  "pools": [
                      {
                          "url": "${MoneroMiningPool}",
                          "user": "aws-remote",
                          "pass": "xxxPASSxxx",
                          "rig-id": null,
                          "tls": true
                      }
                  ]
              }
              __EOF__

              cd /crypto/grin-miner
              cat > grin-miner.toml << __EOF__
              [logging]
              log_to_stdout = true
              stdout_log_level = "Info"
              log_to_file = true
              file_log_level = "Debug"
              log_file_path = "grin-miner.log"
              log_file_append = true

              [mining]
              run_tui = false
              stratum_server_addr = "us-east-stratum.grinmint.com:4416"
              stratum_server_login = "rust.brad+grin@gmail.com/aws"
              #stratum_server_password = "bradmovedtoparkcityin2020"
              stratum_server_tls_enabled = true

              [[mining.miner_plugin_config]]
              plugin_name = "cuckarooz_cuda_29"
              [mining.miner_plugin_config.parameters]
              #device = 1
              __EOF__


              INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
              INSTANCE_ID=AWS-ETH-WORKER

              cd /crypto
              wget -O ethminer.tar.gz https://github.com/ethereum-mining/ethminer/releases/download/v0.18.0/ethminer-0.18.0-cuda-9-linux-x86_64.tar.gz
              tar xvfz ethminer.tar.gz
              cd bin

              echo "starting" > /crypto/ethminer.log

              cat > runner.sh << __EOF__
              #!/bin/bash -x
              #SERVERS=(us1 us2 eu1 asia1)
              SERVERS=(us1 us2)

              # when using amazon linux
              export SSL_CERT_FILE=/etc/pki/tls/certs/ca-bundle.trust.crt

              while (true); do

                case ${Miner} in
                  betterhasheth)
                    echo -n "betterhasheth"
                    cd /crypto/bin
                    ./ethminer \
                      -P stratum://${Worker}:${Password}@${Url1} \
                      -P stratum://${Worker}:${Password}@${Url2} \
                      > /crypto/ethminer.log 2>&1
                    ;;

                  ethermineeth)
                    echo -n "ethermineeth"
                    cd /crypto/bin
                    ./ethminer \
                      -P stratums://${EthWallet}@us2.ethermine.org:5555 \
                      -P stratums://${EthWallet}@us1.ethermine.org:5555 \
                      > /crypto/ethminer.log 2>&1
                    ;;

                  twominerseth)
                    echo -n "2miners"
                    cd /crypto/gminer
                    ./miner --algo ethash --server eth.2miners.com:2020 --user ${EthWallet} --pass x \
                       >> /crypto/ethminer.log 2>&1
                    ;;

                  twominersravencoin)
                    echo -n "2miners"
                    cd /crypto/gminer
                    ./miner --algo kawpow --server us-rvn.2miners.com:6060 --user RMRurzYnCYygGHuRygKKMwcuVbMV4emWBW --pass x \
                       >> /crypto/ethminer.log 2>&1
                    ;;

                  grin)
                    echo -n "grin"
                    cd /crypto/grin-miner
                    #./grin-miner >> /crypto/grinminer.log 2>&1
                    cd /crypto/gminer
                    #./miner --algo grin32 \
                    #    --server us-east-stratum.grinmint.com:4416 \
                    #    --user rust.brad+grin@gmail.com/aws \
                    #    --ssl true \
                    #    >> /crypto/gminer.log 2>&1
                    ./miner --algo grin32 \
                            --ssl true \
                            --server us-grin.2miners.com \
                            --port 13030 \
                            --user grin10sfuzx7xg2mr4hyn0la0u8n6zck93ugkw2yv7xlxna7mhgr4nqwsd9n6nf.aws \
                        >> /crypto/gminer.log 2>&1
                    ;;

                  *)
                    echo "dunno what kind of miner to use"
                    sleep 60000
                    ;;
                esac
              done
              __EOF__
              chmod +x runner.sh
              nohup ./runner.sh &

              cd /crypto/xmrig-6.9.0
              cat > cpurunner.sh << __EOF__
              #!/bin/bash -x
              cd /xmrig-6.9.0
              echo "starting" > xmrig.log
              while (true); do

                echo -n "attempt to use miner ${Miner}"

                # these are all proxied
                case ${CpuMiner} in
                  xmr)
                    ./xmrig -c config.json --tls -o ${MoneroMiningPool} \
                        --log-file=xmrig.log --no-color --randomx-1gb-pages \
                        -a rx/0 -O x:x >> xmrig.log 2>&1
                    ;;

                  xmr2miners)
                    ./xmrig -c config.json --tls \
                         -o xmr.2miners.com:12222 -a rx \
                         --log-file=xmrig.log --no-color --randomx-1gb-pages \
                         -O 45NiKNo4evmHFNup5L48DoVaHo6fJvHNZDigH4ygXKj3UQCat5u5sxG2dezLN2MvR31uw9K3wqHwUc1CVwCaHkvX8eyTbQD:x \
                         >> xmrig.log 2>&1
                    ;;

                  xmrsupportxmr)
                    ./xmrig -c config.json --tls \
                         -o pool.supportxmr.com:9000 -a rx \
                         --log-file=xmrig.log --no-color --randomx-1gb-pages \
                         -O 45NiKNo4evmHFNup5L48DoVaHo6fJvHNZDigH4ygXKj3UQCat5u5sxG2dezLN2MvR31uw9K3wqHwUc1CVwCaHkvX8eyTbQD:aws \
                         >> xmrig.log 2>&1
                    ;;

                  tron)
                    ./xmrig -o rx.unmineable.com:3333 -a rx -k \
                        --log-file=xmrig.log --no-color --randomx-1gb-pages \
                        -u TRX:TCHgjbqTmqbAtcLK7Ndwsugv5CCt62oTSN.xdog
                    # ./xmrig -c config.json --tls -o ${MoneroMiningPool} -a rx -O x:x >> xmrig.log 2>&1
                    ;;

                  aave)
                    ./xmrig -o rx.unmineable.com:3333 -a rx -k \
                        --log-file=xmrig.log --no-color --randomx-1gb-pages \
                        -u AAVE:0x9CbF2d447CaF77d4A86B355d7f9Cc9065e48b82d.xdog
                    # ./xmrig -c config.json --tls -o ${MoneroMiningPool} -a rx -O x:x >> xmrig.log 2>&1
                    ;;

                  *)
                    echo "dunno what kind of miner to use"
                    sleep 60000
                    ;;
                esac
              done
              __EOF__
              chmod +x cpurunner.sh
              nohup ./cpurunner.sh &

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Ref: SSHAccessIP
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
      # As long as you have a default VPC, don't have to specify: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html#cfn-ec2-securitygroup-vpcid
      VpcId:
        Ref: VpcId

  MinerAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 0
      MaxSize: !Ref InstanceCount
      DesiredCapacity: !Ref InstanceCount
      CapacityRebalance: false
      VPCZoneIdentifier: !Ref SubnetIds
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      TerminationPolicies:
        - ClosestToNextInstanceHour
      NotificationConfigurations:
        - TopicARN: !Ref NotificationTopic
          NotificationTypes:
            - autoscaling:EC2_INSTANCE_LAUNCH
            - autoscaling:EC2_INSTANCE_TERMINATE
            - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
            - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  NotificationTopic:
    Type: AWS::SNS::Topic

Outputs:
  NotificationTopic:
    Description: Monitoring notification topic
    Value: !Ref NotificationTopic

  DashboardUrl:
    Description: Ethermine Dashboard URL
    Value: !Sub "https://ethermine.org/miners/${EthWallet}/dashboard"
